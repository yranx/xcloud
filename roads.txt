一：Eureka Server: 提供服务注册和发现 -- 服务注册中心
1.添加依赖
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-eureka-server</artifactId>
</dependency>
2.开启服务注册
在springboot工程的启动application类上加 @EnableEurekaServer
3.添加配置
server:
  port: 8089
eureka:
  instance:
    hostname: 127.0.0.1
  client:
    #防止将自己作为客户端尝试注册自己
    register-with-eureka: false
    fetch-registry: false
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/cloud-eureka/
4.访问： http://localhost:8089/

二： Service Provider ：服务提供者
将自身服务注册到 Eureka 注册中心，从而使服务消费方能够找到
1.添加依赖
<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka-server</artifactId>
		</dependency>
2.开启服务注册
在应用主类中通过加上 @EnableEurekaClient，但只有Eureka 可用，也可以使用@EnableDiscoveryClient
3.添加配置
server:
  port: 8090

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8089/cloud-eureka/
spring:
  application:
    name: eureka-provider

三：Ribbon ：提供客户端的软件负载均衡算法
（通过RestTemplate + Ribbon去消费服务）

cloud-ribbon-consumer
1.在项目：spring-cloud-eureka-provider-1，spring-cloud-eureka-provider-2，spring-cloud-eureka-provider-3 的启动类，
都加入 @Value("${server.port}")，修改home()方法， 来区分不同端口的Controller 响应；
修改server: port:端口依次为8081,8082,8083
2.添加依赖
<!-- 客户端负载均衡 -->
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-ribbon</artifactId>
</dependency>

<!-- eureka客户端 -->
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-eureka</artifactId>
</dependency>

3.开启服务负载均衡
在工程的启动类中,通过@EnableDiscoveryClient向服务注册中心注册；
向程序的ioc注入一个bean: restTemplate；
并通过@LoadBalanced注解表明这个restRemplate开启负载均衡的功能。
4.ConsumerController 类，调用提供者的 hello 方法
5.配置 application.yml
指定服务的注册中心地址，配置自己的服务端口，服务名称
6.启动服务
  依次启动项目：
  spring-cloud-eureka-service
  spring-cloud-eureka-provider
  spring-cloud-eureka-provider-2
  spring-cloud-eureka-provider-3
  spring-cloud-ribbon-consumer
7.
查看服务是否都已注册成功：http://localhost:8089/
在命令窗口curl http://localhost:9000/hello，发现Ribbon已经实现负载均衡
或者浏览器get 请求http://localhost:9000/hello F5 刷新

四：Feign：是一个声明式的伪Http客户端，它使得写Http客户端变得更简单
（通过Feign去消费服务）
默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果

cloud-feign-consumer
1.添加依赖
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-feign</artifactId>
</dependency>
2.开启Feign
在工程的启动类中,通过
@EnableFeignClients
@EnableDiscoveryClient
3.
server:
  port: 9000

eureka:
  client:
    serviceUrl:
      defaultZone: http://127.0.0.1:8089/eureka/

spring:
  application:
    name: feign-consumer
4.报错： Field feignClient in com.ranx.FeignConsumerController required a bean of type 'com.ranx.IFeignClient' that could not be found
这是因为未在启动类上加注解
5.
  查看服务是否都已注册成功：http://localhost:8089/
  在命令窗口curl http://localhost:9000/hello，发现Ribbon已经实现负载均衡
  或者浏览器get 请求http://localhost:9000/hello F5 刷新

五：Hystrix Dashboard：断路器监控
在Spring Cloud Hystrix中实现了线程隔离、断路器等一系列的服务保护功能。
它也是基于Netflix的开源框架 Hystrix实现的，该框架目标在于通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。
Hystrix具备了服务降级、服务熔断、线程隔离、请求缓存、请求合并以及服务监控等强大功能。

cloud-ribbon-consumer-hystrix
1.在 Ribbon中使用断路器
2.通过 @EnableHystrix 开启 Hystrix 断路器监控
3.Controller 类，调用提供者的 hello 方法
加上注解@HystrixCommand(fallbackMethod = "defaultStores") 该注解对该方法创建了熔断器的功能 ,并指定了defaultStores熔断方法
4.依次启动项目：
cloud-eureka-service、cloud-eureka-provider、cloud-eureka-provider-2、cloud-eureka-provider-3、
cloud-ribbon-consumer-hystrix
5.停止cloud-eureka-provider 提供者，端口为：8081服务
再次访问命令窗口curl http://localhost:9000/hello

cloud-feign-consumer-hystrix
1.在 Feign中使用断路器
Feign是   自带断路器  的，如果在Dalston版本的Spring Cloud中，它没有默认打开。
需要需要在配置文件中配置打开它
feign:
  hystrix:
    enabled: true
2.@FeignClient 注解，加上fallbackFactory指定新建的HystrixClientFallbackFactory 工厂类
程序的启动类通过 @EnableHystrix 开启 Hystrix

Hystrix Dashboard
作为断路器状态的一个组件，提供了数据监控和图形化界面。
cloud-ribbon-consumer-hystrix-dashboard
1.在程序启动类类，加上@EnableHystrix注解开启断路器，加上@EnableHystrixDashboard注解，开启HystrixDashboard。
在程序中声明断路点@HystrixCommand；
2.访问 http://127.0.0.1:9090/hystrix ,获取Hystrix Dashboard信息，默认最大打开5个终端获取监控信息，可以增加delay参数指定获取监控数据间隔时间
 在界面依次输入：http://127.0.0.1:9000/hystrix.stream 、2000 、hello 点确定。

六：服务网关 zuul
通过服务网关统一向外系统提供REST API的过程中，Zuul为微服务架构提供了前门保护的作用，
同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。
Zuul是Netflix的基于JVM的路由器和服务器端负载均衡器
cloud-zuul-service
1.添加依赖
  <dependency>
  	<groupId>org.springframework.cloud</groupId>
  	<artifactId>spring-cloud-starter-zuul</artifactId>
  </dependency>
2.在程序的启动类通过 @EnableZuulProxy 开启 Zuul 服务网关
3.配置文件 application.yml
spring:
    application:
      name: zuul-service
server:
    port: 9000
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
zuul:
  routes:
    api:
        path: /**
        serviceId: eureka-provider

配置说明：
浏览器访问:http://127.0.0.1:9000/ ,Zuul 会去 Eureka 服务注册中心，找到eureka-provider服务以均衡负载的方式访问
4.访问:http://127.0.0.1:9000/ ,Zuul 会去 Eureka 服务注册中心，找到eureka-provider服务以均衡负载的方式访问
在命令窗口curl http://localhost:9000/，发现一切正常

cloud-zuul-filter
1.TokenFilter、PasswordFilter
  ZuulFilter 是Zuul中核心组件，通过继承该抽象类，覆写几个关键方法达到自定义调度请求的作用
2.在程序的启动类 添加 Bean
3.http://localhost:8089/
http://127.0.0.1:9000/
http://127.0.0.1:9000/?token=token-uuid
http://127.0.0.1:9000/?token=token-uuid&password=123456

七：高可用的分布式配置中心 Spring Cloud Config
分布式配置中心组件spring cloud config，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中。
分两个角色，一是config server，二是config client。
最大的优势是和Spring无缝集成，支持Spring里面Environment和PropertySource的接口，对于已有的Spring应用程序的迁移成本非常低

SpringCloudConfig分服务端和客户端，服务端负责将git svn中存储的配置文件发布成REST接口，客户端可以从服务端REST接口获取配置。但客户端并不能主动感知到配置的变化，从而主动去获取新的配置，这需要每个客户端通过POST方法触发各自的/refresh。

SpringCloudConfig +git
cloud-config-server
1.添加依赖
  <dependency>
  	<groupId>org.springframework.cloud</groupId>
  	<artifactId>spring-cloud-config-server</artifactId>
  </dependency>
2.在程序的启动类 通过 @EnableConfigServer 开启 SpringCloudConfig 服务端
3.cloud-config 文件夹下有 application-dev.properties,application-sit.properties,application-uat.properties 三个文件，内容依次是：content=hello dev,content=hello sit,content=hello uat
4.http://localhost:9888/xcloud-config-server/dev/master
http://localhost:9888/master/application-dev.properties

cloud-config-client
1.添加依赖
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-config-client</artifactId>
</dependency>

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
</dependency>
2.在程序的启动类通过 @Value 获取服务端的 content 值的内容
3.这里的配置文件一定要注意！！
s1:cloud-config-server端口配8888，在cloud-config-client会报端口占用错误！！
后者有 Tomcat started on port(s): 8888 (http) with context path ''
s2:cloud-config-client的配置需要注意：（如何配置！！）
在bootstrap.yml中的内容是预先加载的内容，比application.properties和application.yml优先级还高。
4.http://localhost:8888/
（上面Tomcat启动的是8888端口）（为啥启动8888？？并没有配该端口！！）

SpringCloudConfig  + Eureka
cloud-config-server-eureka
1.程序启动类
@EnableConfigServer
@EnableEurekaClient
2.http://localhost:9888/xcloud-config-server/dev/master

3.客户端配置
cloud-eureka-service
cloud-config-server-eureka
cloud-eureka-provider-4
cloud-eureka-provider-5
cloud-feign-consumer
4.http://localhost:8089/
http://127.0.0.1:9000/hello